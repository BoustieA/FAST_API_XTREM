"""
Module contenant la classe ApplicationServices qui gÃ¨re le cycle de vie des
services de l'application FastAPI XTREM.

La classe `ApplicationServices` centralise l'accÃ¨s aux diffÃ©rents services
de l'application, comme le gestionnaire de base de donnÃ©es
et le gestionnaire de logs.
Elle fournit des mÃ©thodes pour initialiser et nettoyer ces services de
maniÃ¨re centralisÃ©e.

Elle est utilisÃ©e pour connecter la base de donnÃ©es, gÃ©rer l'Ã©tat des services,
et assurer un dÃ©marrage et un arrÃªt propres de l'application.
"""

from fast_api_xtrem.app.config import AppConfig
from fast_api_xtrem.db.db_manager import DBManager
from fast_api_xtrem.logger.logger_manager import LoggerManager


class ApplicationServices:
    """
    Classe contenant tous les services de l'application FastAPI XTREM.
    Fournit un accÃ¨s centralisÃ© aux diffÃ©rents services
    et gÃ¨re leur cycle de vie.
    """

    def __init__(self, config: AppConfig) -> None:
        """
        Initialise les services de l'application.

        Args:
            config: Configuration de l'application.
        """
        self.config = config
        # Instancier le logger en amont pour l'ensemble des services
        self.logger = LoggerManager(self.config.logger_config)
        # CrÃ©er l'instance de DBManager en passant le logger
        self.db_manager = DBManager(
            config=self.config.database_config,
            logger_config=self.config.logger_config,
            logger=self.logger,
        )
        self._initialized = False

    def initialize(self) -> None:
        """
        Initialise et dÃ©marre tous les services.
        Ne fait l'initialisation qu'une seule fois.

        Cette mÃ©thode Ã©tablit la connexion Ã  la base de donnÃ©es,
        crÃ©e les tables nÃ©cessaires si elles n'existent pas,
        et effectue toute autre initialisation requise pour
        le bon fonctionnement des services.

        Si les services ont dÃ©jÃ  Ã©tÃ© initialisÃ©s,
        un avertissement est enregistrÃ©.
        """
        if self._initialized:
            self.logger.warning("Services dÃ©jÃ  initialisÃ©s")
            return

        # Connexion Ã  la base de donnÃ©es et crÃ©ation des tables
        try:
            self.db_manager.connect()
        except Exception as e:
            self.logger.error(
                f"Ã‰chec de la connexion Ã  la base de donnÃ©es : {e}"
            )
            raise

        # Optionnel : afficher les tables existantes pour debug
        tables = self.db_manager.check_tables()
        self.logger.info(f"Tables dans la BD au dÃ©marrage : {tables}")

        self._initialized = True
        self.logger.info("âœ… Tous les services ont Ã©tÃ© initialisÃ©s")

    def cleanup(self) -> None:
        """
        Nettoie et ferme tous les services.

        Cette mÃ©thode effectue la dÃ©connexion de la base de donnÃ©es et arrÃªte
        proprement tous les services initialisÃ©s.
        Elle doit Ãªtre appelÃ©e lorsque l'application est arrÃªtÃ©e
        ou lors de la fermeture des services.

        Si les services n'ont pas Ã©tÃ© initialisÃ©s, rien ne se passe.
        """
        if not self._initialized:
            return

        # DÃ©connexion propre de la base
        self.db_manager.disconnect()
        self.logger.info("ğŸ”Œ DÃ©connexion de la base de donnÃ©es effectuÃ©e")

        self.logger.info("ğŸ›‘ Tous les services ont Ã©tÃ© arrÃªtÃ©s")
        self._initialized = False
