"""
Gestionnaire de base de donn√©es pour FastAPI XTREM.

Ce module fournit une classe DBManager pour g√©rer la connexion,
la cr√©ation de tables et les op√©rations CRUD sur la base de donn√©es.
"""

from pathlib import Path

from sqlalchemy import create_engine, inspect
from sqlalchemy.orm import sessionmaker

from fast_api_xtrem.app.config import AppConfig
from fast_api_xtrem.db.base import Base
from fast_api_xtrem.logger.logger_manager import LoggerManager


class DBConnectionError(RuntimeError):
    """
    Exception personnalis√©e pour les erreurs de connexion
    √† la base de donn√©es.
    """


class DBManager:
    """
    Classe responsable de la gestion de la base de donn√©es.

    Elle g√®re l'initialisation du moteur SQLAlchemy, la cr√©ation des tables,
    la gestion des sessions, et fournit des utilitaires
    comme la v√©rification des tables.
    """

    def __init__(self, config: AppConfig, logger=None):
        """
        Initialise le gestionnaire de base de donn√©es.

        Args:
            config (AppConfig): Configuration de l'application contenant
                                l'URL de la base de donn√©es.
            logger: Instance du gestionnaire de logs.
        """
        self.config = config
        self.database_url = config.database_url
        self.engine = None
        self.session_local = None
        self.logger = logger or LoggerManager()
        self._check_db_file()

    @staticmethod
    def _get_package_root() -> Path:
        """Retourne le chemin racine du package fast_api_xtrem."""
        current_file = Path(__file__)
        package_root = current_file.parent.parent
        return package_root

    def _check_db_file(self):
        """
        V√©rifie si le fichier de base de donn√©es existe,
        l'extrait de l'URL SQLite, et cr√©e le dossier si besoin.
        """
        if self.database_url.startswith("sqlite:///"):
            package_root = self._get_package_root()
            database_dir = package_root / "database"
            if not database_dir.exists():
                database_dir.mkdir(exist_ok=True)
                self.logger.info(
                    f"Cr√©ation du r√©pertoire pour la base de donn√©es: "
                    f"{database_dir}"
                )

            db_file = database_dir / "app_data.db"
            self.database_url = f"sqlite:///{db_file.absolute()}"

            if db_file.exists():
                self.logger.info(
                    f"Utilisation de la base de donn√©es existante: {db_file}"
                )
            else:
                self.logger.info(
                    f"Le fichier de base de donn√©es sera cr√©√©: {db_file}"
                )

    def _create_tables(self):
        """Cr√©e les tables dans la base de donn√©es si elles n'existent pas."""
        self.logger.info("Cr√©ation des tables")
        for table_name in Base.metadata.tables.keys():
            self.logger.info(f"Cr√©ation de la table: {table_name}")
        Base.metadata.create_all(bind=self.engine)

    def connect(self):
        """√âtablit la connexion √† la base de donn√©es SQLite."""
        try:
            self.logger.info(f"Tentative de connexion √†: {self.database_url}")
            self.engine = create_engine(
                self.database_url,
                connect_args={"check_same_thread": False},  # Pour SQLite
            )

            self._create_tables()

            self.session_local = sessionmaker(
                autocommit=False, autoflush=False, bind=self.engine
            )

            with self.engine.connect() as conn:
                with conn.begin():
                    pass  # V√©rifie que la base r√©pond

            self.logger.success(
                f"‚úÖ Connect√© √† la base de donn√©es: {self.database_url}"
            )
            return True

        except Exception as e:
            self.logger.error(
                f"‚ùå Erreur de connexion √† la base de donn√©es: {str(e)}"
            )
            raise DBConnectionError(
                "√âchec de la connexion √† la base de donn√©es"
            ) from e

    def disconnect(self):
        """Ferme proprement la connexion √† la base de donn√©es."""
        if self.engine:
            self.engine.dispose()
            self.logger.info("üîå D√©connexion de la base de donn√©es effectu√©e")
        else:
            self.logger.warning(
                "Tentative de d√©connexion sans connexion active"
            )

    def get_db(self):
        """
        Fournit une session de base de donn√©es
        pour les d√©pendances FastAPI.

        Yields:
            Session: Instance de session SQLAlchemy.
        """
        if not self.session_local:
            self.logger.error(
                "Tentative d'obtenir une session sans connexion active"
            )
            raise DBConnectionError("Base de donn√©es non connect√©e")

        db = self.session_local()
        try:
            yield db
        finally:
            db.close()

    def check_tables(self):
        """
        V√©rifie les tables existantes dans la base de donn√©es.

        Returns:
            list[str]: Noms des tables d√©tect√©es.
        """
        if not self.engine:
            self.logger.error(
                "Impossible de v√©rifier les tables sans connexion active"
            )
            return []

        inspector = inspect(self.engine)
        tables = inspector.get_table_names()
        if tables:
            self.logger.info(f"Tables existantes: {', '.join(tables)}")
        else:
            self.logger.info(
                "Aucune table n'existe encore dans la base de donn√©es"
            )
        return tables
